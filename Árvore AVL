#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Estrutura do nó da árvore AVL
typedef struct No {
    int valor;
    struct No *esquerda;
    struct No *direita;
    int altura;
} No;

// Função para obter a altura de um nó
int altura(No *no) {
    if (no == NULL)
        return 0;
    return no->altura;
}

// Função para obter o máximo entre dois números
int max(int a, int b) {
    return (a > b) ? a : b;
}

// Função para criar um novo nó
No* novoNo(int valor) {
    No* no = (No*)malloc(sizeof(No));
    no->valor = valor;
    no->esquerda = NULL;
    no->direita = NULL;
    no->altura = 1;
    return no;
}

// Rotação à direita
No* rotacaoDireita(No *y) {
    No *x = y->esquerda;
    No *T2 = x->direita;

    x->direita = y;
    y->esquerda = T2;

    y->altura = max(altura(y->esquerda), altura(y->direita)) + 1;
    x->altura = max(altura(x->esquerda), altura(x->direita)) + 1;

    return x;
}

// Rotação à esquerda
No* rotacaoEsquerda(No *x) {
    No *y = x->direita;
    No *T2 = y->esquerda;

    y->esquerda = x;
    x->direita = T2;

    x->altura = max(altura(x->esquerda), altura(x->direita)) + 1;
    y->altura = max(altura(y->esquerda), altura(y->direita)) + 1;

    return y;
}

// Obtém o fator de balanceamento de um nó
int fatorBalanceamento(No *no) {
    if (no == NULL)
        return 0;
    return altura(no->esquerda) - altura(no->direita);
}

// Função para inserir um valor na árvore AVL
No* inserir(No* no, int valor) {
    if (no == NULL)
        return novoNo(valor);

    if (valor < no->valor)
        no->esquerda = inserir(no->esquerda, valor);
    else if (valor > no->valor)
        no->direita = inserir(no->direita, valor);
    else
        return no; // Valores iguais não são permitidos

    no->altura = 1 + max(altura(no->esquerda), altura(no->direita));

    int balanceamento = fatorBalanceamento(no);

    // Caso Esquerda Esquerda
    if (balanceamento > 1 && valor < no->esquerda->valor)
        return rotacaoDireita(no);

    // Caso Direita Direita
    if (balanceamento < -1 && valor > no->direita->valor)
        return rotacaoEsquerda(no);

    // Caso Esquerda Direita
    if (balanceamento > 1 && valor > no->esquerda->valor) {
        no->esquerda = rotacaoEsquerda(no->esquerda);
        return rotacaoDireita(no);
    }

    // Caso Direita Esquerda
    if (balanceamento < -1 && valor < no->direita->valor) {
        no->direita = rotacaoDireita(no->direita);
        return rotacaoEsquerda(no);
    }

    return no;
}

// Encontra o nó com menor valor (usado na exclusão)
No* menorValorNo(No* no) {
    No* atual = no;
    while (atual->esquerda != NULL)
        atual = atual->esquerda;
    return atual;
}

// Função para excluir um nó da árvore AVL
No* excluirNo(No* raiz, int valor) {
    if (raiz == NULL)
        return raiz;

    if (valor < raiz->valor)
        raiz->esquerda = excluirNo(raiz->esquerda, valor);
    else if (valor > raiz->valor)
        raiz->direita = excluirNo(raiz->direita, valor);
    else {
        // Nó com apenas um filho ou sem filhos
        if ((raiz->esquerda == NULL) || (raiz->direita == NULL)) {
            No *temp = raiz->esquerda ? raiz->esquerda : raiz->direita;

            // Sem filhos
            if (temp == NULL) {
                temp = raiz;
                raiz = NULL;
            } else // Um filho
                *raiz = *temp; // Copia os dados do filho
            
            free(temp);
        } else {
            // Nó com dois filhos: pega o sucessor in-order (menor na subárvore direita)
            No* temp = menorValorNo(raiz->direita);

            // Copia o valor do sucessor
            raiz->valor = temp->valor;

            // Exclui o sucessor
            raiz->direita = excluirNo(raiz->direita, temp->valor);
        }
    }

    // Se a árvore tinha apenas um nó, retorna
    if (raiz == NULL)
        return raiz;

    // Atualiza altura
    raiz->altura = 1 + max(altura(raiz->esquerda), altura(raiz->direita));

    // Verifica balanceamento
    int balanceamento = fatorBalanceamento(raiz);

    // Caso Esquerda Esquerda
    if (balanceamento > 1 && fatorBalanceamento(raiz->esquerda) >= 0)
        return rotacaoDireita(raiz);

    // Caso Esquerda Direita
    if (balanceamento > 1 && fatorBalanceamento(raiz->esquerda) < 0) {
        raiz->esquerda = rotacaoEsquerda(raiz->esquerda);
        return rotacaoDireita(raiz);
    }

    // Caso Direita Direita
    if (balanceamento < -1 && fatorBalanceamento(raiz->direita) <= 0)
        return rotacaoEsquerda(raiz);

    // Caso Direita Esquerda
    if (balanceamento < -1 && fatorBalanceamento(raiz->direita) > 0) {
        raiz->direita = rotacaoDireita(raiz->direita);
        return rotacaoEsquerda(raiz);
    }

    return raiz;
}

// Função de busca
No* buscar(No* raiz, int valor) {
    if (raiz == NULL || raiz->valor == valor)
        return raiz;

    if (raiz->valor < valor)
        return buscar(raiz->direita, valor);

    return buscar(raiz->esquerda, valor);
}

// Percorre a árvore em ordem
void emOrdem(No *raiz) {
    if (raiz != NULL) {
        emOrdem(raiz->esquerda);
        printf("%d ", raiz->valor);
        emOrdem(raiz->direita);
    }
}

// Função para mostrar a árvore por nível (BFS)
void mostrarPorNivel(No* raiz) {
    if (raiz == NULL) {
        printf("A arvore esta vazia.\n");
        return;
    }

    // Fila para armazenar os nós a serem visitados
    No* fila[100];  // Tamanho fixo para simplificar (pode ser dinâmico se necessário)
    int inicio = 0;
    int fim = 0;

    fila[fim++] = raiz;  // Enfileira a raiz

    while (inicio < fim) {
        int nosNoNivel = fim - inicio;  // Número de nós no nível atual

        // Processa todos os nós do nível atual
        while (nosNoNivel > 0) {
            No* noAtual = fila[inicio++];
            printf("%d ", noAtual->valor);

            // Enfileira os filhos esquerdo e direito, se existirem
            if (noAtual->esquerda != NULL) {
                fila[fim++] = noAtual->esquerda;
            }
            if (noAtual->direita != NULL) {
                fila[fim++] = noAtual->direita;
            }

            nosNoNivel--;
        }
        printf("\n");  // Quebra de linha para separar os níveis
    }
}

// Libera a memória da árvore
void liberarArvore(No* no) {
    if (no == NULL) return;
    
    liberarArvore(no->esquerda);
    liberarArvore(no->direita);
    free(no);
}

// Menu interativo
void menu() {
    printf("\nMenu:\n");
    printf("1. Inserir valor\n");
    printf("2. Excluir valor\n");
    printf("3. Buscar valor\n");
    printf("4. Mostrar arvore em ordem\n");
    printf("5. Mostrar arvore por nivel\n");  // Nova opção
    printf("6. Sair\n");
    printf("Escolha uma opcao: ");
}

int main() {
    No *raiz = NULL;
    int opcao, valor;
    No* resultadoBusca;

    while (1) {
        menu();
        scanf("%d", &opcao);

        switch (opcao) {
            case 1:
                printf("Digite o valor a ser inserido: ");
                scanf("%d", &valor);
                raiz = inserir(raiz, valor);
                printf("Valor %d inserido com sucesso!\n", valor);
                break;
                
            case 2:
                printf("Digite o valor a ser excluído: ");
                scanf("%d", &valor);
                raiz = excluirNo(raiz, valor);
                printf("Valor %d excluído com sucesso!\n", valor);
                break;
                
            case 3:
                printf("Digite o valor a ser buscado: ");
                scanf("%d", &valor);
                resultadoBusca = buscar(raiz, valor);
                if (resultadoBusca != NULL)
                    printf("Valor %d encontrado na árvore!\n", valor);
                else
                    printf("Valor %d não encontrado na árvore.\n", valor);
                break;
                
            case 4:
                printf("Árvore em ordem: ");
                emOrdem(raiz);
                printf("\n");
                break;
                
            case 5:
                printf("Arvore por nivel:\n");
                mostrarPorNivel(raiz);
                break;
                
            case 6:
                liberarArvore(raiz);
                printf("Programa encerrado.\n");
                return 0;
                
            default:
                printf("Opção inválida! Tente novamente.\n");
        }
    }

    return 0;
}
