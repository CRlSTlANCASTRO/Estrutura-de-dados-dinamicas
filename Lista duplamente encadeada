#include <stdio.h>
#include <stdlib.h>

// Estrutura para representar um no da lista
struct Node {
    int valor;
    struct Node* proximo;
    struct Node* anterior;
};

// Funcao para criar um novo no
struct Node* criarNo(int valor) {
    struct Node* novoNo = (struct Node*)malloc(sizeof(struct Node));
    novoNo->valor = valor;
    novoNo->proximo = NULL;
    novoNo->anterior = NULL;
    return novoNo;
}

// Funcao para inserir no inicio da lista
void inserirInicio(struct Node** cabeca, int valor) {
    struct Node* novoNo = criarNo(valor);
    if (*cabeca == NULL) {
        *cabeca = novoNo;
    } else {
        novoNo->proximo = *cabeca;
        (*cabeca)->anterior = novoNo;
        *cabeca = novoNo;
    }
}

// Funcao para inserir no final da lista
void inserirFinal(struct Node** cabeca, int valor) {
    struct Node* novoNo = criarNo(valor);
    if (*cabeca == NULL) {
        *cabeca = novoNo;
    } else {
        struct Node* temp = *cabeca;
        while (temp->proximo != NULL) {
            temp = temp->proximo;
        }
        temp->proximo = novoNo;
        novoNo->anterior = temp;
    }
}

// Funcao para inserir apos um determinado no
void inserirApos(struct Node* noAnterior, int valor) {
    if (noAnterior == NULL) {
        printf("O no anterior nao pode ser nulo.\n");
        return;
    }
    struct Node* novoNo = criarNo(valor);
    novoNo->proximo = noAnterior->proximo;
    if (noAnterior->proximo != NULL) {
        noAnterior->proximo->anterior = novoNo;
    }
    noAnterior->proximo = novoNo;
    novoNo->anterior = noAnterior;
}

// Funcao para remover do inicio da lista
void removerInicio(struct Node** cabeca) {
    if (*cabeca == NULL) {
        printf("A lista esta vazia.\n");
        return;
    }
    struct Node* temp = *cabeca;
    *cabeca = (*cabeca)->proximo;
    if (*cabeca != NULL) {
        (*cabeca)->anterior = NULL;
    }
    free(temp);
}

// Funcao para remover do final da lista
void removerFinal(struct Node** cabeca) {
    if (*cabeca == NULL) {
        printf("A lista esta vazia.\n");
        return;
    }
    struct Node* temp = *cabeca;
    while (temp->proximo != NULL) {
        temp = temp->proximo;
    }
    if (temp->anterior != NULL) {
        temp->anterior->proximo = NULL;
    } else {
        *cabeca = NULL;
    }
    free(temp);
}

// Funcao para remover um no especifico
void removerNo(struct Node** cabeca, int valor) {
    if (*cabeca == NULL) {
        printf("A lista esta vazia.\n");
        return;
    }
    struct Node* temp = *cabeca;
    while (temp != NULL && temp->valor != valor) {
        temp = temp->proximo;
    }
    if (temp == NULL) {
        printf("Valor nao encontrado na lista.\n");
        return;
    }
    if (temp->anterior != NULL) {
        temp->anterior->proximo = temp->proximo;
    } else {
        *cabeca = temp->proximo;
    }
    if (temp->proximo != NULL) {
        temp->proximo->anterior = temp->anterior;
    }
    free(temp);
}

// Funcao para buscar um valor na lista
struct Node* buscar(struct Node* cabeca, int valor) {
    struct Node* temp = cabeca;
    while (temp != NULL) {
        if (temp->valor == valor) {
            return temp;
        }
        temp = temp->proximo;
    }
    return NULL;
}

// Funcao para exibir a lista na ordem direta
void exibirOrdemDireta(struct Node* cabeca) {
    struct Node* temp = cabeca;
    while (temp != NULL) {
        printf("%d -> ", temp->valor);
        temp = temp->proximo;
    }
    printf("NULL\n");
}

// Funcao para exibir a lista na ordem inversa
void exibirOrdemInversa(struct Node* cabeca) {
    struct Node* temp = cabeca;
    if (temp == NULL) {
        printf("A lista esta vazia.\n");
        return;
    }
    while (temp->proximo != NULL) {
        temp = temp->proximo;
    }
    while (temp != NULL) {
        printf("%d -> ", temp->valor);
        temp = temp->anterior;
    }
    printf("NULL\n");
}

// Funcao principal para testar a lista
int main() {
    struct Node* cabeca = NULL;
    int escolha, valor, valorReferencia;

    while (1) {
        printf("\nMenu:\n");
        printf("1. Inserir no inicio\n");
        printf("2. Inserir no final\n");
        printf("3. Inserir apos um valor especifico\n");
        printf("4. Remover do inicio\n");
        printf("5. Remover do final\n");
        printf("6. Remover um valor especifico\n");
        printf("7. Buscar um valor\n");
        printf("8. Exibir lista (ordem direta)\n");
        printf("9. Exibir lista (ordem inversa)\n");
        printf("10. Sair\n");
        printf("Escolha uma opcao: ");
        scanf("%d", &escolha);

        switch (escolha) {
            case 1:
                printf("Digite o valor a ser inserido no inicio: ");
                scanf("%d", &valor);
                inserirInicio(&cabeca, valor);
                break;
            case 2:
                printf("Digite o valor a ser inserido no final: ");
                scanf("%d", &valor);
                inserirFinal(&cabeca, valor);
                break;
            case 3:
                printf("Digite o valor de referencia: ");
                scanf("%d", &valorReferencia);
                printf("Digite o valor a ser inserido apos %d: ", valorReferencia);
                scanf("%d", &valor);
                struct Node* noReferencia = buscar(cabeca, valorReferencia);
                if (noReferencia != NULL) {
                    inserirApos(noReferencia, valor);
                } else {
                    printf("Valor de referencia nao encontrado.\n");
                }
                break;
            case 4:
                removerInicio(&cabeca);
                break;
            case 5:
                removerFinal(&cabeca);
                break;
            case 6:
                printf("Digite o valor a ser removido: ");
                scanf("%d", &valor);
                removerNo(&cabeca, valor);
                break;
            case 7:
                printf("Digite o valor a ser buscado: ");
                scanf("%d", &valor);
                struct Node* resultado = buscar(cabeca, valor);
                if (resultado != NULL) {
                    printf("Valor %d encontrado na lista.\n", valor);
                } else {
                    printf("Valor %d nao encontrado na lista.\n", valor);
                }
                break;
            case 8:
                printf("Lista na ordem direta:\n");
                exibirOrdemDireta(cabeca);
                break;
            case 9:
                printf("Lista na ordem inversa:\n");
                exibirOrdemInversa(cabeca);
                break;
            case 10:
                printf("Saindo...\n");
                exit(0);
            default:
                printf("Opcao invalida. Tente novamente.\n");
        }
    }

    return 0;
}
